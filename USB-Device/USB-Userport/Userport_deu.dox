/** \~German

 * The USB-Userport *
 Copyright 2020  René Trapp (rene [dot] trapp (-at-) web [dot] de)
 License: "The MIT license" - see license.txt

 @file
 Diese Datei enthält die DoxyGen-Hauptseite und weitere Seiten der
 Dokumentation. Sie ist enthält keinen Quellcode für das Projekt.
*/

/** \~German
 @mainpage USB-Userport

 Vor vielen, vielen Jahren gab es für Hardware-Hacker, Computer-Fans
 und Elektronik-Entwickler einfach erreichbare Schnittstellen am
 Computer.
 Einfach erreichbar sowohl von der Aussenseite des Computers als
 auch von dessen Innerem. Man brauchte nur einen passenden
 Steckverbinder, ein bißchen Verdrahtung und die geeignete
 Programmierung.

 Moderne Betriebssysteme machen es uns dagegen sehr schwer direkt
 auf Hardware-Schnittstellen zuzugreifen. Spezielle Treiber kann
 man sich zwar aus dem Internet holen aber da ist immer das Risiko
 unbekannter Software und man muss den Installern auch noch
 Administrator-Rechte einräumen. Nicht jeder hat allerdings die
 nötigen Rechte (oder will sie nutzen). Das gilt besonders für die
 Labore großer Unternehmen oder den Ausbildungsbereich.

 Aber selbst wenn diese Einschränkungen für den eigenen PC nicht
 gelten, verfügen aktuelle Computermodelle gar nicht mehr über die
 altgedienten Schnittstellen um sie wie früher zu benutzen.
 Stattdessen ist USB weit verbreitet. Glücklicherweise bieten die
 modernen Betriebssysteme, die den direkten Hardwarezugriff nach
 Kräften verwehren, generische Treiberklassen für diverse
 USB-Gerätschaften. Glücklicherweise gibt es den
 Arduino-Mikrokosmos, gedacht für Ausbildungszwecke. Aus der Ecke
 gibt es kostengünstige Modelle, die an den USB angeschlossen
 werden können - ohne den Umweg über einen USB-nach-Seriell Adapter.
 Und erfreulicherweise gibt es für genau diese Arduinos mit Atmel
 µCs und deren USB-Möglichkeiten Dean Cameras wunderbares
 [LUFA-Projekt](http://www.lufa-lib.org).

 Nehme ich alle diese Teile zusammen und lerne die generischen
 USB-Treiber des Betriebssystems zu nutzen, kann ich ein Gerät
 bauen durch das ich wieder direkt aus meinem PC-Programm heraus
 auf Hardware-Leitungen zugreifen kann. Gut, das geht nicht ganz
 so direkt mit @c in und @c out Befehlen wie früher. Aber immerhin
 öffnet das die Tür zu den feinen Sachen, die moderne Computer
 nicht (mehr) bieten.


 @section Sec_Info USB Information

 Die nachfolgende Tabelle soll eine kleine Übersicht geben welche
 Eigenschaften der USB-Userport als USB-Gerät aufweist.

 <table>
   <tr><td><b>USB Klasse:</b>           </td> <td>Human Interface Device (HID)</td></tr>
   <tr><td><b>USB Unterklasse:</b>      </td> <td>            N/A             </td></tr>
   <tr><td><b>USB Modus:</b>            </td> <td>           Device           </td></tr>
   <tr><td><b>Hersteller ID (VID):</b>  </td> <td>           0x04D8           </td></tr>
   <tr><td><b>Produkt ID (PID):</b>     </td> <td>           0xEBC7           </td></tr>
   <tr><td><b>Stromaufnahme max.:</b>   </td> <td>           100 mA           </td></tr>
   <tr><td><b>Polling-Intervall:</b>    </td> <td>             5 ms           </td></tr>
   <tr><td><b>Maßgebliche Standards:</b></td> <td>[USBIF HID Specification](https://www.usb.org/sites/default/files/documents/hid1_11.pdf) \n [USBIF HID Usage Tables](https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf)</td></tr>
   <tr><td><b>Unterstützte USB Geschwindigkeit:</b> </td> <td>Full Speed Mode \n (Low Speed Mode)</td></tr>
 </table>
 Der vorgestellt USB-Userport wird für den Full Speed Mode
 übersetzt. Das LUFA unterstützt auch die Übersetzung als Gerät
 im Low Speed Mode. Das habe ich nicht getestet und ich empfehle
 es auch nicht.


 @section Sec_Description Projektbeschreibung

 Das USB-Userport-Projekt verwandelt einen
 [Sparkfun ProMicro](https://www.sparkfun.com/products/12640)
 in eine nützliche Hardwareschnittstelle für jedes PC-Programm.
 Möglicherweise eignet sich auch ein
 [Sparkfun Qwiic Pro Micro](https://www.sparkfun.com/products/15795)
 ohne Änderungen.
 Der USB-Userport 'leiht' seine Ein- und Ausgabeleitungen dem
 PC-Programm ohne einen speziellen Treiber zu benötigen.
 Die Kommunikation übernimmt der generische HID-Treiber des
 Betriebssystems. Das  PC-Programm kann die Schnittstellenleitungen
 mittels zugehöriger USB-Reports ansprechen. Die Zuordnung zwischen
 USB-Definition und ProMicro-Anschlüssen ist wie folgt: 
 <table>
   <tr><th><b>USB-Userport</b> </th> <th><b>ProMicro</b>  </th></tr>
   <tr><td>       LED[0]       </td> <td>     RX-LED      </td></tr>
   <tr><td>       LED[1]       </td> <td>     TX-LED      </td></tr>
   <tr><td> GPIO1[0]           </td> <td>      -n/a-      </td></tr>
   <tr><td> GPIO1[1]           </td> <td>        15       </td></tr>
   <tr><td> GPIO1[2]           </td> <td>        16       </td></tr>
   <tr><td> GPIO1[3]           </td> <td>        14       </td></tr>
   <tr><td> GPIO1[4]           </td> <td>         8       </td></tr>
   <tr><td> GPIO1[5] - Servo 1 </td> <td>         9       </td></tr>
   <tr><td> GPIO1[6] - Servo 2 </td> <td>        10       </td></tr>
   <tr><td> GPIO1[7]           </td> <td>         5       </td></tr>
   <tr><td> GPIO1[8]           </td> <td>         3       </td></tr>
   <tr><td> GPIO1[9]           </td> <td>         2       </td></tr>
   <tr><td>GPIO1[10]           </td> <td>         0       </td></tr>
   <tr><td>GPIO1[11]           </td> <td>         1       </td></tr>
   <tr><td>GPIO1[12]           </td> <td>         4       </td></tr>
   <tr><td>GPIO1[13]           </td> <td>      -n/a-      </td></tr>
   <tr><td>GPIO1[14]           </td> <td>         7       </td></tr>
   <tr><td>GPIO1[15]           </td> <td>         6       </td></tr>
   <tr><td> GPIO2[0]           </td> <td>      -n/a-      </td></tr>
   <tr><td> GPIO2[1]           </td> <td>      -n/a-      </td></tr>
   <tr><td> GPIO2[2]           </td> <td>      -n/a-      </td></tr>
   <tr><td> GPIO2[3]           </td> <td>      -n/a-      </td></tr>
   <tr><td> GPIO2[4] - ADC[4]  </td> <td>        21       </td></tr>
   <tr><td> GPIO2[5] - ADC[5]  </td> <td>        20       </td></tr>
   <tr><td> GPIO2[6] - ADC[6]  </td> <td>        19       </td></tr>
   <tr><td> GPIO2[7] - ADC[7]  </td> <td>        18       </td></tr>
   <tr><td> GPIO2[8]           </td> <td>      -n/a-      </td></tr>
   <tr><td> GPIO2[9]           </td> <td>      -n/a-      </td></tr>
   <tr><td>GPIO2[10]           </td> <td>      -n/a-      </td></tr>
   <tr><td>GPIO2[11]           </td> <td>      -n/a-      </td></tr>
   <tr><td>GPIO2[12]           </td> <td>      -n/a-      </td></tr>
   <tr><td>GPIO2[13]           </td> <td>      -n/a-      </td></tr>
   <tr><td>GPIO2[14]           </td> <td>      -n/a-      </td></tr>
   <tr><td>GPIO2[15]           </td> <td>      -n/a-      </td></tr>
 </table>

 Wenn der USB-Userport an den USB-Host angeschlossen wird, wird er
 als benutzerdefiniertes USB-HID-Gerät erkannt und im System
 bereitgestellt. Das PC-Programm kann dann die verfügbaren Reports
 senden und empfangen, so wie die Definitionen der
 [USB HID specification](https://www.usb.org/sites/default/files/documents/hid1_11.pdf)
 das vorgeben.

 Ein spezieller Feature-Report lässt den USB-Userport zu seinem
 eingebauten Bootlader zurückspringen. Das ist für die Entwicklung
 vorgesehen, kann sich aber auch für andere Zwecke als nützlich
 erweisen.


 @section Sec_Reports USB-Reports

 Die Kommunikation mit und die Kontrolle des USB-Userport läuft
 über vorgegebene Reports. Das PC-Programm sendet und empfängt die
 Reports mittels der generischen HID-API des Betriebssystems.
 Der USB-Userport reagiert auf diese Reports. Alle
 Interfaceleitungen werden mit @c In @c Reports oder @c Out
 @c Reports gesteuert, spezielle Geräteeigenschaften werden durch
 @c Feature @c Reports kontrolliert.

 Durch die Fülle an Möglichkeiten werden Report-IDs verwendet um
 die Kommandos und Datenpakete auseinander zu halten.

 Die definierten USB-In- und -Out-Report-IDs:
 <table>
  <tr>
   <th><b>Report-ID</b></th>
   <th><b>Richtung</b></th>
   <th><b>Daten</b></th>
   <th><b>Beschreibung</b></th>
  </tr>
  <tr>
   <td>0x01</td>
   <td>In</td>
   <td>1 Byte \n
       @c 0000_00bb</td>
   <td><b>Get Device LEDs</b>
       holt den Zustand der LEDs. LED leuchtet = Bit ist '1'. \n
       Bit 1 <=> Tx-LED \n
       Bit 0 <=> Rx-LED</td>
  </tr>
  <tr>
   <td>0x01</td>
   <td>Out</td>
   <td>1 Byte \n
       @c 0000_00bb</td>
   <td><b>Set Device LEDs</b>
       kontrolliert die LEDs. Bit ist '1' = LED leuchtet. \n
       Bit 1 <=> Tx-LED \n
       Bit 0 <=> Rx-LED</td>
  </tr>
  <tr>
   <td>0x02</td>
   <td>In</td>
   <td>2 Bytes \n
       @c bb0b_bbbb_bbbb_bbb0</td>
   <td><b>Get GPIO1 States</b>
       holt die logischen Zustände der IO-Leitungen.
       Intel-Format, Bit 13 und Bit 0 sind nicht verfügbar.</td>
  </tr>
  <tr>
   <td>0x02</td>
   <td>Out</td>
   <td>4 Bytes \n
       @c bb0b_bbbb_bbbb_bbb0 \n
       @c mm0m_mmmm_mmmm_mmm0</td>
   <td><b>Set GPIO1 States</b>
       schreibt auf die IO-Leitungen oder aktiviert die Pull-Ups.
       Es werden nur die Bits ('b') geschrieben, deren Maske ('m')
       auf '1' liegt. Der Report hat keinen Effekt wenn die Maske
       0x0000 vorliegt.
       Intel-Format, Bit 13 und Bit 0 sind nicht verfügbar.</td>
  </tr>
  <tr>
   <td>0x03</td>
   <td>In</td>
   <td>2 Bytes \n
       @c bb0b_bbbb_bbbb_bbb0</td>
   <td><b>Get GPIO1 Directions</b>
       holt die Datenrichtungen der IO-Leitungen. Eine '1' bedeutet
       'Ausgabe'.
       Intel-Format, Bit 13 und Bit 0 sind nicht verfügbar.</td>
   </td>
  </tr>
  <tr>
   <td>0x03</td>
   <td>Out</td>
   <td>4 Bytes \n
       @c bb0b_bbbb_bbbb_bbb0 \n
       @c mm0m_mmmm_mmmm_mmm0</td>
   <td><b>Set GPIO1 Directions</b>
       kontrolliert die Datenrichtungen, eine '1' bedeutet 'Ausgabe'.
       Es werden nur die Bits ('b') geschrieben, deren Maske ('m')
       auf '1' liegt. Der Report hat keinen Effekt wenn die Maske
       0x0000 vorliegt.
       Intel-Format, Bit 13 und Bit 0 sind nicht verfügbar.</td>
  </tr>
  <tr>
   <td>0x04</td>
   <td>In</td>
   <td>2 Bytes \n
       @c 0000_0000_bbbb_0000</td>
   <td><b>Get GPIO2 States</b>
       holt die logischen Zustände der IO-Leitungen.
       Intel-Format, nur Bit 7 bis Bit 4 sind verfügbar.</td>
  </tr>
  <tr>
   <td>0x04</td>
   <td>Out</td>
   <td>4 Bytes \n
       @c 0000_0000_bbbb_0000 \n
       @c 0000_0000_mmmm_0000</td>
   <td><b>Set GPIO2 States</b>
       schreibt auf die IO-Leitungen oder aktiviert die Pull-Ups.
       Es werden nur die Bits ('b') geschrieben, deren Maske ('m')
       auf '1' liegt. Der Report hat keinen Effekt wenn die Maske
       0x0000 vorliegt.
       Intel-Format, nur Bit 7 bis Bit 4 sind verfügbar.</td>
  </tr>
  <tr>
   <td>0x05</td>
   <td>In</td>
   <td>2 Bytes \n
       @c 0000_0000_bbbb_0000</td>
   <td><b>Get GPIO2 Directions</b>
       holt die Datenrichtungen der IO-Leitungen. Eine '1' bedeutet
       'Ausgabe'.
       Intel-Format, nur Bit 7 bis Bit 4 sind verfügbar.</td>
   </td>
  </tr>
  <tr>
   <td>0x05</td>
   <td>Out</td>
   <td>4 Bytes \n
       @c 0000_0000_bbbb_0000 \n
       @c 0000_0000_mmmm_0000</td>
   <td><b>Set GPIO2 Directions</b>
       kontrolliert die Datenrichtungen, eine '1' bedeutet 'Ausgabe'.
       Es werden nur die Bits ('b') geschrieben, deren Maske ('m')
       auf '1' liegt. Der Report hat keinen Effekt wenn die Maske
       0x0000 vorliegt.
       Intel-Format, nur Bit 7 bis Bit 4 sind verfügbar.</td>
  </tr>
  <tr>
   <td>0x0E</td>
   <td>In</td>
   <td>4 Bytes \n
       GPIO1: @c cccc_cccc_cccc_cccc \n
       GPIO2: @c cccc_cccc_cccc_cccc</td>
   <td><b>Get Change Control</b>
       holt die Einstellung des Änderungsmonitors.
       Die Änderungsüberwachung der IO-Leitung ist aktiv wenn das
       zugehörige Bit auf '1' steht.
       Die unteren beiden Bytes sind für GPIO1 zuständig, die oberen
       beiden Bytes für GPIO2. Intel-Format.</td>
  </tr>
  <tr>
   <td>0x0E</td>
   <td>Out</td>
   <td>4 Bytes \n
       GPIO1: @c cccc_cccc_cccc_cccc \n
       GPIO2: @c cccc_cccc_cccc_cccc</td>
   <td><b>Set Change Control</b>
       kontrolliert die Überwachung auf Zustandsänderung der
       IO-Leitungen.
       Die Änderungsüberwachung der IO-Leitung ist aktiv wenn das
       zugehörige Bit auf '1' steht.
       Die unteren beiden Bytes sind für GPIO1 zuständig, die oberen
       beiden Bytes für GPIO2. Intel-Format.
       <b>Changed Bits</b> reports können nur erzeugt werden wenn
       wenigstens ein Änderungsmonitor aktiv ist.</td>
  </tr>
  <tr>
   <td>0x0F</td>
   <td>In</td>
   <td>8 Bytes \n
       GPIO1: @c bbbb_bbbb_bbbb_bbbb \n
       GPIO1: @c cccc_cccc_cccc_cccc \n
       GPIO2: @c bbbb_bbbb_bbbb_bbbb \n
       GPIO2: @c cccc_cccc_cccc_cccc</td>
   <td><b>Changed Bits</b>
       liefert Änderungen der IO-Leitungen seit der letzten USB-
       Anfrage vom Host. Die ersten zwei Bytes spiegeln den Zustand
       der IO-Leitungen ('b') von GPIO1. Die nächsten zwei Bytes
       zeigen eine Änderung auf der zugehörigen Leitung ('c').
       GPIO2 kommt danach mit der selben Struktur. Intel-Format.
       * *Dieser Report wird automatisch gesendet, wenn der Host
       das Gerät nach Interrupt-In-Reports befragt, sofern denn
       eine Änderung statt fand. Das PC-Programm kann diesen Report
       nicht gezielt anfordern.*</td>
  </tr>
  <tr>
   <td>0x10</td>
   <td>Out</td>
   <td>2 Bytes \n
       DIDR: @c bbbb_0000 \n
       AREF: @c o000_00r1</td>
   <td><b>Set ADC</b>
       kontrolliert die analogen Eingänge.
       Schaltet den ADC an ('o' = 1) oder komplett aus ('o' = 0).
       Stellt die zentrale Referenzquelle (AREF) ein. 'r' schaltet
       die analoge Referenzspannung auf 2.56 V wenn gesetzt ('1'),
       auf AVcc wenn gelöscht ('0', default).
       'b' schaltet die digitalen Eingangsstufen am zugehörigen
       GPIO ab (Stichwort: DIDR) wenn auf '1' gesetzt. \n
       * *Die Einstellung des jeweiligen GPIO ist gemäß der
       Anwendung vorzunehmen!* Der jeweilige GPIO sollte als
       Eingang definiert werden und der Pull-Up ausgeschaltet sein.
       Für besondere Experimente sind alle GPIO-Möglichkeiten
       absichtlich weiterhin vorhanden.</td>
  </tr>
  <tr>
   <td>0x14</td>
   <td>In</td>
   <td>2 Bytes \n
       @c bbbb_bbbb_bb00_0000</td>
   <td><b>Get ADC[4]</b>
       holt den aktuell anliegenden Spannungswert von ADC[4]
       ab. Die signifikanten Bits sind linksbündig ausgerichtet,
       die Bytereihenfolge entspricht dem Intel-Format.
       0x0000 <=> 0 V, 0xFFC0 <=> AREF \n
       * *Die Einstellung des GPIO (GPIO[4]) ist gemäß der
       Anwendung vorzunehmen!*</td>
  </tr>
  <tr>
   <td>0x15</td>
   <td>In</td>
   <td>2 Bytes \n
       @c bbbb_bbbb_bb00_0000</td>
   <td><b>Get ADC[5]</b>
       holt den aktuell anliegenden Spannungswert von ADC[5]
       ab. Die signifikanten Bits sind linksbündig ausgerichtet,
       die Bytereihenfolge entspricht dem Intel-Format.
       0x0000 <=> 0 V, 0xFFC0 <=> AREF \n
       * *Die Einstellung des GPIO (GPIO[5]) ist gemäß der
       Anwendung vorzunehmen!*</td>
  </tr>
  <tr>
   <td>0x16</td>
   <td>In</td>
   <td>2 Bytes \n
       @c bbbb_bbbb_bb00_0000</td>
   <td><b>Get ADC[6]</b>
       holt den aktuell anliegenden Spannungswert von ADC[6]
       ab. Die signifikanten Bits sind linksbündig ausgerichtet,
       die Bytereihenfolge entspricht dem Intel-Format.
       0x0000 <=> 0 V, 0xFFC0 <=> AREF \n
       * *Die Einstellung des GPIO (GPIO[6]) ist gemäß der
       Anwendung vorzunehmen!*</td>
  </tr>
  <tr>
   <td>0x17</td>
   <td>In</td>
   <td>2 Bytes \n
       @c bbbb_bbbb_bb00_0000</td>
   <td><b>Get ADC[7]</b>
       holt den aktuell anliegenden Spannungswert von ADC[7]
       ab. Die signifikanten Bits sind linksbündig ausgerichtet,
       die Bytereihenfolge entspricht dem Intel-Format.
       0x0000 <=> 0 V, 0xFFC0 <=> AREF \n
       * *Die Einstellung des GPIO (GPIO[7]) ist gemäß der
       Anwendung vorzunehmen!*</td>
  </tr>
  <tr>
   <td>0x20</td>
   <td>In</td>
   <td>2 Bytes \n
       Servo 1: @c bbbb_bbbb \n
       Servo 2: @c bbbb_bbbb</td>
   <td><b>Get Servos</b>
       holt die derzeit gültige Pulsdauer für das jeweilige Servo
       ab. Die Werte liegen im Bereich 0 bis 250.</td>
  </tr>
  <tr>
   <td>0x20</td>
   <td>Out</td>
   <td>2 Bytes \n
       Servo 1: @c bbbb_bbbb \n
       Servo 2: @c bbbb_bbbb</td>
   <td><b>Set Servos</b>
       stellt die Pulsdauern im Bereich 0 (= 1000 µs) bis 250
       (= 2000 µs) für das jeweilige Servo ein.
       Der Defaultwert ist 125 (= 1500 µs = Mittelstellung). \n
       Werte über 250 beeinflussen die Impulsdauer nicht,
       stattdessen werden sie zur Steuerung des Impulsgenerators
       des jeweiligen Servokanals verwendet: \n
       255 <=> neutraler Wert, Servoeinstellung wird nicht verändert. \n
       254 <=> reserviert, nicht benutzen! \n
       253 <=> Servologik einschalten, Impulsausgang anstelle GPIO. \n
       252 <=> reserviert, nicht benutzen! \n
       251 <=> reserviert, nicht benutzen! \n
       Siehe auch die \ref Sec_Servo_Hinweise weiter unten.</td>
  </tr>
  <tr>
   <td>0xF8</td>
   <td>Out</td>
   <td>2 Bytes</td>
   <td><b>Set Address</b>
       übergibt die Adresse des IO-Registers für Schreib- oder
       Lesezugriffe.</td>
  </tr>
  <tr>
   <td>0xF9</td>
   <td>In</td>
   <td>1 Byte</td>
   <td><b>Read from Address</b>
       liest ein Byte vom vorgewählten IO-Register.</td>
  </tr>
  <tr>
   <td>0xF9</td>
   <td>Out</td>
   <td>1 Byte</td>
   <td><b>Write to Address</b>
       schreibt ein Byte zum vorgewählten IO-Register.</td>
  </tr>
 </table>

 Die definierten USB-Feature-Report-IDs:
 <table>
  <tr>
   <th><b>Feature-ID</b></th>
   <th><b>Richtung</b></th>
   <th><b>Daten</b></th>
   <th><b>Beschreibung</b></th>
  </tr>
  <tr>
   <td>0x2A</td>
   <td>Out</td>
   <td>7 Bytes Schlüssel \n
       @c 0x52 @c 0x65 @c 0x66 @c 0x6c @c 0x61 @c 0x73 @c 0x68 </td>
   <td>Stoppt das USB-Interface und springt zum Bootlader, sofern
       der Schlüssel passt.</td>
  </tr>
 </table>


 @section Sec_Options Konfiguration Anpassen

 Es gibt am USB-Userport die einstellbaren Konfigurationsoptionen:
 @li @ref DEVICE_SERIAL_NUMBER
 @li @ref MAX_CURRENT_DRAW
 @li @ref POLLING_INTERVAL

 Diese sind in der Datei AppConfig.h zu finden. Nach einer Änderung
 muss der Code neu übersetzt und in den Controller übertragen werden.


 @section Sec_Hinweise Einige Wichtige Hinweise

 Du kannst den hier vorgestellten USB-Userport so benutzen wie er
 ist oder auch an Deine Bedürfnisse anpassen.

 Vor lauter Begeisterung über die neuen Möglichkeiten beachte
 bitte immer drei Dinge:

 @li Von Microchip Technology Inc bekam ich die Erlaubnis die
     VID/PID-Kombination 0x04D8 / 0xEBC7 für mein
     USB-Userport-Projekt zu benutzen. Diese Kombination darf nicht
     für andere USB-Geräte verwendet werden.
 @li Das LUFA-Paket steht unter der MIT-Lizenz. Sie erfordert stets
     die Nennung der Urheber, etwa so:
 @code{.unparsed}
 * * The USB-Userport *
   Copyright 2020  René Trapp (rene [dot] trapp (-at-) web [dot] de)

 * * LUFA Library *
   Copyright 2017  Dean Camera (dean [at] fourwalledcubicle [dot] com)
 @endcode
 @li Der USB-Userport steht in der aktuellen Version unter der GPL 3.0
     Lizenz.
 @li Die jeweils verwendete Lizenz ist stets mit anzugeben.

 Das vollständige LUFA-Projekt ist auf der Seite
 [www.lufa-lib.org](http://www.lufa-lib.org)
 zu finden.
 Der USB-Userport basiert auf dem LUFA Generic HID Demo.
 Für den USB-Userport verwende ich LUFA 170418; andere Versionen
 könnten auch funktionieren aber das habe ich nicht ausprobiert.


 @section Sec_Servo_Hinweise Hinweise zum Servo-Betrieb

 Die Impulserzeugung für die Servos hat die Eigenschaften
 <table>
  <tr>
   <td><b> Impulspolarität:  </b></td> <td> positiv </td>
  </tr>
  <tr>
   <td><b> Impulsdauer min.: </b></td> <td>  1000 µs</td>
  </tr>
  <tr>
   <td><b> Impulsdauer max.: </b></td> <td>  2000 µs</td>
  </tr>
  <tr>
   <td><b> Wiederholrate:    </b></td> <td> 20000 µs</td>
  </tr>
 </table>

 Erfahrungsgemäß ist es wichtig die Impulslängen im 'normgerechten'
 Bereich von 1 ms bis 2 ms zu halten. Pulslängen ausserhalb dieser
 Grenzen führen oft zu einer Überlastung des Getriebes und zur
 Zerstörung der Servomechanik. Es ist daher besonderes Augenmerk
 darauf zu legen, dass niemals ein Servo an einen Standard GPIO
 angeschlossen wird der mit falschem Timing schaltet. Bereits
 kurze Störimpulse können das Servo gegen einen Anschlag laufen
 lassen und mechanisch zerstören.
 Daher ist dafür zu sorgen, dass ein als Eingang geschalteter GPIO
 ans Servo eine dauerhafte '0' übermittelt. Auch ein ausgeschalteter
 USB-Userport muss ans Servo eine '0' übermitteln. Nur im Falle
 eines aktiv eingeschalteten GPIO (= Ausgang) auf '1' erhält das
 Servo eine '1'. Die ansteigende Flanke wird das Servo starten,
 die meisten aktuellen Servos stoppen wenn keine weitere Flanke
 nachfolgt. Ein zu kurzer Impuls, beispielsweise weil der
 USB-Userport während des Impulses ausgeschaltet wird, lässt das
 Servo zwar kurz loslaufen, es stoppt aber sehr schnell wieder.

 Ohne Impuls erfolgt keine (schädliche) Bewegung des Servos. Dies
 ermöglicht es das Servo an einen GPIO angeschlossen zu haben,
 bevor der USB-Userport für den Anwendungsfall konfiguriert ist.

 @note Es liegt in der Verantwortung des Host-Programms die
 Datenrichtungen und die Portausgangsregister der beiden GPIOs für
 die Servos nicht zu verändern wenn sie zur Servokontrolle
 verwendet werden sollen!

 Weiterhin liegt die Stromaufnahme eines Servos deutlich über der
 erlaubten Strombelastbarkeit eines USB-Ports und belastet auch die
 Versorgungselektronik des USB-Userport erheblich. Es wird daher
 dringend empfohlen eine eigene und ausreichend belastbare
 Versorgung für die Servos zu verwenden. Diese Versorgung wird
 unabhängig von der USB-Versorgung sein und insbesondere kann die
 jeweils andere Versorgung gerade ausgeschaltet sein.

 Nun gibt es mehrere Möglichkeiten ein Servo mit dem USB-Userport
 zu verbinden. Im einfachsten Fall wird der Impulsausgang direkt an
 den entsprechenden Anschluß des Servos geführt. Falls die Elektronik
 eine überhöhte Spannung in den µC-Anschluß gibt, wird dieser
 beschädigt. Auch wenn das Servo abgeschaltet ist, könnten Impulse
 vom µC das Servo schädigen. Es sollte zumindest ein Widerstand
 zum Schutz in diese Leitung eingefügt werden.

 @image html "Servo Direct.png" "Direkte Servoansteuerung"
 @image latex "Servo Direct.png" "Direkte Servoansteuerung"

 Als Luxusversion gibt es noch eine Variante mit zwei Transistoren
 und 4 Widerständen, die diese Gesichtspunkte berücksichtigt.
 Die Schaltung passt gleichzeitig die logischen Pegel des
 Impulses vom USB-Userport an die Versorgungsspannung des Servos
 an.

 @image html Servo.png "Servoansteuerung mit Pegelanpassung"
 @image latex Servo.png "Servoansteuerung mit Pegelanpassung"

 Das Einschalten der Servologik ist einfach, es wird lediglich der
 zugehörige USB-Report vom Host gesendet. Es ergeben sich 3
 Möglichkeiten:
 @li Nur Servo 1 initialisieren, GPIO[5] als Ausgang schalten
     @code{.unparsed}
     Send_HID_Report(REPORT_ID_SERVO_PWM, 253, 255)
     @endcode
 @li Nur Servo 2 initialisieren, GPIO[6] als Ausgang schalten
     @code{.unparsed}
     Send_HID_Report(REPORT_ID_SERVO_PWM, 255, 253)
     @endcode
 @li Beide Servos initialisieren, GPIO[5] und GPIO[6] als Ausgang
     schalten
     @code{.unparsed}
     Send_HID_Report(REPORT_ID_SERVO_PWM, 253, 253)
     @endcode
 Die Initialisierung funktioniert ohne unerwünschte Störimpulse.
 Bedingt durch die Hardware dauert es 20 ms bis der erste Impuls
 zum Servo gesendet wird.
 Nach einer Initialisierung bleibt die jeweilige Servologik bis
 zum nächsten RESET in Betrieb und der zugehörige GPIO ist nicht
 anderweitig verwendbar. Eine Abschaltung des Impulsgenerators ist
 nicht vorgesehen.

 Die initiale Pulslänge von 1500 µs bringt das Servo in seine
 Mittelstellung.
 Es ist möglich die Vorgabewerte für die Servos bereits zu
 senden, ohne dass die Servologik eingeschaltet ist. Dadurch
 können von der Mittelstellung abweichende Startpositionen
 realisiert werden. Zum Beispiel:
 @code{.unparsed}
 Send_HID_Report(REPORT_ID_SERVO_PWM, 50, 200)
 Send_HID_Report(REPORT_ID_SERVO_PWM, 253, 253)
 @endcode

*/
