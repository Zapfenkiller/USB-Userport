/** \~German
 @file
 Diese Datei enthält die DoxyGen-Hauptseite und weitere Seiten der
 Dokumentation. Sie ist enthält keinen Quellcode für das Projekt.

 @todo
   An der deutschen Version der Dokumentation weiterarbeiten.
*/

/** \~German
 @mainpage USB-Userport

 Vor vielen, vielen Jahren gab es für Hardware-Hacker, Computer-Fans
 und Elektronik-Entwickler einfach erreichbare Schnittstellen am
 Computer.
 Einfach erreichbar sowohl von der Aussenseite des Computers als
 auch von dessen Innerem. Man brauchte nur einen passenden
 Steckverbinder, ein bißchen Verdrahtung und die geeignete
 Programmierung.

 Moderne Betriebssysteme machen es uns dagegen sehr schwer direkt
 auf Hardware-Schnittstellen zuzugreifen. Spezielle Treiber kann
 man sich zwar aus dem Internet holen aber da ist immer das Risiko
 unbekannter Software und man muss den Installern auch noch
 Administrator-Rechte einräumen. Nicht jeder hat allerdings die
 nötigen Rechte (oder will sie nutzen). Das gilt besonders für die
 Labore großer Unternehmen oder den Ausbildungsbereich.

 Aber selbst wenn diese Einschränkungen für den eigenen PC nicht
 gelten, verfügen aktuelle Computermodelle gar nicht mehr über die
 altgedienten Schnittstellen um sie wie früher zu benutzen.
 Stattdessen ist USB weitverbreitet. Glücklicherweise bieten die
 modernen Betriebssysteme, die den direkten Hardwarezugriff nach
 Kräften verwehren, generische Treiberklassen für diverse
 USB-Gerätschaften. Glücklicherweise gibt es den
 Arduino-Mikrokosmos, gedacht für Ausbildungszwecke. Aus der Ecke
 gibt es kostengünstige Modelle, die an den USB angeschlossen
 werden können - ohne den Umweg über einen USB-nach-Seriell Adapter.
 Und erfreulicherweise gibt es für genau diese Arduinos mit Atmel
 µCs und deren USB-Möglichkeiten Dean Cameras wunderbares
 [LUFA-Projekt](http://www.lufa-lib.org).

 Nehme ich alle diese Teile zusammen und lerne die generischen
 USB-Treiber des Betriebssystems zu nutzen, kann ich ein Gerät
 bauen durch das ich wieder direkt aus meinem PC-Programm heraus
 auf Hardware-Leitungen zugreifen kann. Gut, das geht nicht ganz
 so direkt mit @c in und @c out Befehlen wie früher. Aber immerhin
 öffnet das die Tür zu den feinen Sachen, die moderne Computer
 nicht (mehr) bieten.


 @section Sec_Info USB Information

 The following table gives a rundown of the USB utilization of
 the USB-Userport.

 <table>
   <tr><td><b>USB Class:</b>            </td> <td>Human Interface Device (HID) </td></tr>
   <tr><td><b>USB Subclass:</b>         </td> <td>             N/A             </td></tr>
   <tr><td><b>USB Mode:</b>             </td> <td>            Device           </td></tr>
   <tr><td><b>Vendor ID:</b>            </td> <td>             04D8            </td></tr>
   <tr><td><b>Product ID:</b>           </td> <td>             EBC7            </td></tr>
   <tr><td><b>Relevant Standards:</b>   </td> <td>[USBIF HID Specification](https://www.usb.org/sites/default/files/documents/hid1_11.pdf) \n [USBIF HID Usage Tables](https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf)</td></tr>
   <tr><td><b>Supported USB Speeds:</b> </td> <td>Full Speed Mode \n (Low Speed Mode)</td></tr>
 </table>
 The USB-Userport as is, compiles to use Full Speed Mode. LUFA can
 support compilation for Low Speed Mode. But this is neither tested,
 nor recommended.

 @section Sec_Description Project Description

 The USB-Userport turns a
 [Sparkfun ProMicro](https://www.sparkfun.com/products/12640)
 into a versatile interface device for your computer application.
 Eventually a
 [Sparkfun Qwiic Pro Micro](https://www.sparkfun.com/products/15795)
 could also do the job without changes.
 It gives input and output lines to PC application programs without
 the need to install special drivers. The generic HID driver of your
 OS connects to the hardware part. Any PC application can access the
 IO-lines by using dedicated reports. The mapping from USB control
 to ProMicro IO-lines is as follows:
 <table>
   <tr><th><b>USB-Userport</b> </th> <th><b>ProMicro</b>  </th></tr>
   <tr><td>      LED[0]        </td> <td>     RX-LED      </td></tr>
   <tr><td>      LED[1]        </td> <td>     TX-LED      </td></tr>
   <tr><td>     GPIO1[0]       </td> <td>      -n/a-      </td></tr>
   <tr><td>     GPIO1[1]       </td> <td>        15       </td></tr>
   <tr><td>     GPIO1[2]       </td> <td>        16       </td></tr>
   <tr><td>     GPIO1[3]       </td> <td>        14       </td></tr>
   <tr><td>     GPIO1[4]       </td> <td>         8       </td></tr>
   <tr><td>     GPIO1[5]       </td> <td>         9       </td></tr>
   <tr><td>     GPIO1[6]       </td> <td>        10       </td></tr>
   <tr><td>     GPIO1[7]       </td> <td>         5       </td></tr>
   <tr><td>     GPIO1[8]       </td> <td>         3       </td></tr>
   <tr><td>     GPIO1[9]       </td> <td>         2       </td></tr>
   <tr><td>    GPIO1[10]       </td> <td>         0       </td></tr>
   <tr><td>    GPIO1[11]       </td> <td>         1       </td></tr>
   <tr><td>    GPIO1[12]       </td> <td>         4       </td></tr>
   <tr><td>    GPIO1[13]       </td> <td>      -n/a-      </td></tr>
   <tr><td>    GPIO1[14]       </td> <td>         7       </td></tr>
   <tr><td>    GPIO1[15]       </td> <td>         6       </td></tr>
   <tr><td>     GPIO2[0]       </td> <td>      -n/a-      </td></tr>
   <tr><td>     GPIO2[1]       </td> <td>      -n/a-      </td></tr>
   <tr><td>     GPIO2[2]       </td> <td>      -n/a-      </td></tr>
   <tr><td>     GPIO2[3]       </td> <td>      -n/a-      </td></tr>
   <tr><td>     GPIO2[4]       </td> <td>        21       </td></tr>
   <tr><td>     GPIO2[5]       </td> <td>        20       </td></tr>
   <tr><td>     GPIO2[6]       </td> <td>        19       </td></tr>
   <tr><td>     GPIO2[7]       </td> <td>        18       </td></tr>
   <tr><td>     GPIO2[8]       </td> <td>      -n/a-      </td></tr>
   <tr><td>     GPIO2[9]       </td> <td>      -n/a-      </td></tr>
   <tr><td>    GPIO2[10]       </td> <td>      -n/a-      </td></tr>
   <tr><td>    GPIO2[11]       </td> <td>      -n/a-      </td></tr>
   <tr><td>    GPIO2[12]       </td> <td>      -n/a-      </td></tr>
   <tr><td>    GPIO2[13]       </td> <td>      -n/a-      </td></tr>
   <tr><td>    GPIO2[14]       </td> <td>      -n/a-      </td></tr>
   <tr><td>    GPIO2[15]       </td> <td>      -n/a-      </td></tr>
 </table>

 When attached to the USB, the host will enumerate the USB-Userport
 as a custom (vendor defined) HID device.
 Your application program can send and receive reports by both the
 standard data endpoint and control request methods as defined in
 the
 [USB HID specification](https://www.usb.org/sites/default/files/documents/hid1_11.pdf).

 One special feature report allows a device hardware reset into the
 bootloader.
 This is dedicated to development purposes.

 @section Sec_Reports USB Reports

 Communication with and control of the USB-Userport is done by
 exchanging reports. The host application (running on the PC)
 sends or receives those reports using the OS generic HID API.
 The USB-Userport device reacts upon those reports. All I/O-lines
 are controlled using @c In @c Reports or @c Out @c Reports,
 special device control is done using @c Feature @c Reports.

 Due to the wealth of accessible controls, IDs are used to
 distinguish the commands and messages.

 USB-Report IDs defined:
 <table>
  <tr>
   <th><b>Report ID</b></th>
   <th><b>Direction</b></th>
   <th><b>Payload</b></th>
   <th><b>Description</b></th>
  </tr>
  <tr>
   <td>0x01</td>
   <td>In</td>
   <td>1 Byte \n
       @c 0000_00bb</td>
   <td><b>Get Device LEDs</b>
       returns the LED states. LED is lit = bit is '1'. \n
       Bit 1 <=> Tx-LED \n
       Bit 0 <=> Rx-LED</td>
  </tr>
  <tr>
   <td>0x01</td>
   <td>Out</td>
   <td>1 Byte \n
       @c 0000_00bb</td>
   <td><b>Set Device LEDs</b>
       controls the LEDs. Bit is '1' = LED is lit. \n
       Bit 1 <=> Tx-LED \n
       Bit 0 <=> Rx-LED</td>
  </tr>
  <tr>
   <td>0x02</td>
   <td>In</td>
   <td>2 Bytes \n
       @c bb0b_bbbb_bbbb_bbb0</td>
   <td><b>Get GPIO1 States</b>
       returns the port line logical states.
       Little endian byte order, bit 13 and bit 0 are not available.</td>
  </tr>
  <tr>
   <td>0x02</td>
   <td>Out</td>
   <td>4 Bytes \n
       @c bb0b_bbbb_bbbb_bbb0 \n
       @c mm0m_mmmm_mmmm_mmm0</td>
   <td><b>Set GPIO1 States</b>
       controls the output lines or input-pull-up circuitry.
       Each bit ('b') is only copied to the port if the mask ('m')
       position is '1'. No effect at all if mask is 0x0000.
       Little endian byte order, bit 13 and bit 0 are not available.</td>
  </tr>
  <tr>
   <td>0x03</td>
   <td>In</td>
   <td>2 Bytes \n
       @c bb0b_bbbb_bbbb_bbb0</td>
   <td><b>Get GPIO1 Directions</b>
       returns the port line directions. A '1' means output.
       Little endian byte order, bit 13 and bit 0 are not available.
   </td>
  </tr>
  <tr>
   <td>0x03</td>
   <td>Out</td>
   <td>4 Bytes \n
       @c bb0b_bbbb_bbbb_bbb0 \n
       @c mm0m_mmmm_mmmm_mmm0</td>
   <td><b>Set GPIO1 Directions</b>
       controls the output lines direction. A '1' means output.
       Each bit ('b') is only copied to the port if the mask ('m')
       position is '1'. No effect at all if mask is 0x0000.
       Little endian byte order, bit 13 and bit 0 are not available.</td>
  </tr>
  <tr>
   <td>0x04</td>
   <td>In</td>
   <td>2 Bytes \n
       @c 0000_0000_bbbb_0000</td>
   <td><b>Get GPIO2 States</b>
       returns the port line logical states.
       Little endian byte order, only bit 7 downto bit 4 are available.</td>
  </tr>
  <tr>
   <td>0x04</td>
   <td>Out</td>
   <td>4 Bytes \n
       @c 0000_0000_bbbb_0000 \n
       @c 0000_0000_mmmm_0000</td>
   <td><b>Set GPIO2 States</b>
       controls the output lines or input-pull-up circuitry.
       Each bit ('b') is only copied to the port if the mask ('m')
       position is '1'. No effect at all if mask is 0x0000.
       Little endian byte order, only bit 7 downto bit 4 are available.</td>
  </tr>
  <tr>
   <td>0x05</td>
   <td>In</td>
   <td>2 Bytes \n
       @c 0000_0000_bbbb_0000</td>
   <td><b>Get GPIO2 Directions</b>
       returns the port line directions. A '1' means output.
       Little endian byte order, only bit 7 downto bit 4 are available.</td>
   </td>
  </tr>
  <tr>
   <td>0x05</td>
   <td>Out</td>
   <td>4 Bytes \n
       @c 0000_0000_bbbb_0000 \n
       @c 0000_0000_mmmm_0000</td>
   <td><b>Set GPIO2 Directions</b>
       controls the output lines direction. A '1' means output.
       Each bit ('b') is only copied to the port if the mask ('m')
       position is '1'. No effect at all if mask is 0x0000.
       Little endian byte order, only bit 7 downto bit 4 are available.</td>
  </tr>
  <tr>
   <td>0x0E</td>
   <td>In</td>
   <td>4 Bytes \n
       GPIO1: @c cccc_cccc_cccc_cccc \n
       GPIO2: @c cccc_cccc_cccc_cccc</td>
   <td><b>Get Change Control</b>
       returns the change monitor settings.
       A '1' means the respective checking is enabled.
       The lower 2 bytes control GPIO1, the upper 2 bytes control GPIO2.
       Little endian byte order.</td>
  </tr>
  <tr>
   <td>0x0E</td>
   <td>Out</td>
   <td>4 Bytes \n
       GPIO1: @c cccc_cccc_cccc_cccc \n
       GPIO2: @c cccc_cccc_cccc_cccc</td>
   <td><b>Set Change Control</b> enables monitoring of bit changes.
       Set bit to '1' to enable the respective checking.
       The lower 2 bytes control GPIO1, the upper 2 bytes control GPIO2.
       Little endian byte order. If at least one bit change monitor is
       enabled, <b>Changed Bits</b> reports might get issued by the
       USB-Userport.</td>
  </tr>
  <tr>
   <td>0x0F</td>
   <td>In</td>
   <td>8 Bytes \n
       GPIO1: @c bbbb_bbbb_bbbb_bbbb \n
       GPIO1: @c cccc_cccc_cccc_cccc \n
       GPIO2: @c bbbb_bbbb_bbbb_bbbb \n
       GPIO2: @c cccc_cccc_cccc_cccc</td>
   <td><b>Changed Bits</b>
       reports bit positions changed since the last cyclic USB-poll.
       The first 2 bytes mirror the GPIO1 port line states ('b').
       The next 2 bytes flag line changes of the corresponding
       position ('c').
       GPIO2 follows thereafter with the same structure.
       Little endian byte order.
       * *This report is automatically sent when the USB host polls
       the device's Interrupt In endpoint for changes, if a change
       occured at all. The user application cannot request this
       report on its own.*</td>
  </tr>
 </table>

 USB-Feature IDs defined:
 <table>
  <tr>
   <th><b>Feature ID</b></th>
   <th><b>Direction</b></th>
   <th><b>Payload</b></th>
   <th><b>Description</b></th>
  </tr>
  <tr>
   <td>0x2A</td>
   <td>Out</td>
   <td>7 Bytes key sequence \n
       @c 0x52 @c 0x65 @c 0x66 @c 0x6c @c 0x61 @c 0x73 @c 0x68 </td>
   <td>Stop the device immediately and start the bootloader, if the key matches.</td>
  </tr>
 </table>
 
  @section Sec_Options Konfiguration Anpassen

 *  The following defines can be found in this demo, which can control the demo behaviour when defined, or changed in value.
 *
 *  <table>
 *   <tr>
 *    <th><b>Define Name:</b></th>
 *    <th><b>Location:</b></th>
 *    <th><b>Description:</b></th>
 *   </tr>
 *   <tr>
 *    <td>GENERIC_REPORT_SIZE</td>
 *    <td>AppConfig.h</td>
 *    <td>This token defines the size of the device reports, both sent and received (including report ID byte). The value
 *        must be an integer ranging from 1 to 255.</td>
 *   </tr>
 *  </table>


 @section Sec_Hinweise Einige Wichtige Hinweise

 Du kannst den hier vorgestellten USB-Userport so benutzen wie er
 ist oder sogar an Deine Bedürfnisse anpassen.

 Vor lauter Begeisterung über die neuen Möglichkeiten beachte
 bitte immer drei Dinge:

 @li Von Microchip Technology Inc bekam ich die Erlaubnis die
     VID/PID-Kombination 0x04D8 / 0xEBC7 für mein
     USB-Userport-Projekt zu benutzen. Diese Kombination darf nicht
     für andere USB-Geräte verwendet werden.
 @li Die MIT-Lizenz erlaubt ziemlich freizügig die Verwendung des
     vorgestellten Projektes aber sie erfordert stets die Nennung
     der Urheber, etwa so:
 @code{.unparsed}
 * * The USB-Userport *
   Copyright 2020  René Trapp (rene [dot] trapp (-at-) web [dot] de)

 * * LUFA Library *
   Copyright 2017  Dean Camera (dean [at] fourwalledcubicle [dot] com)
 @endcode
 @li Die jeweils verwendete Lizenz ist stets mit anzugeben.

 Das vollständige LUFA-Projekt ist auf der Seite
 [www.lufa-lib.org](http://www.lufa-lib.org)
 zu finden.
 Für den USB-USerport verwende ich LUFA 170418; andere Versionen
 könnten auch funktionieren aber das habe ich nicht ausprobiert.
*/
