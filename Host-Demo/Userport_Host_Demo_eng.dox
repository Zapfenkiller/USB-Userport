/** \~English
 @file
 This file contains special DoxyGen information for the generation
 of the main page and other special documentation pages. It is not
 a project source file.
*/

/** \~English
 @mainpage USB-Userport Host-Demo

 The USB-Userport is a nice thing but it only comes to live when
 a host application connects to it.

 In this particular case the Excel Basic is used to write a host
 application instead of serious programming language (e. g C or
 Python). This is because on most windows computers the office
 packet is already installed. There is no need to install
 additional software like compilers or IDEs. You can connect to
 your electronic experiments without admin privileges. The downside
 is an insufficient documentation on the Âµ$ VBA pages.

 As one special side effect it is possible to read sensor data via
 the USB-Userport. This data can get processed using the full Excel
 capabilities. This frequently helps developing special algorithms.

 However, Excel files from the internet could contain malicious
 macro code. This is countermeasured by not giving any Excel-files
 for download. But how shall this demo work?


 @section Sec_Preparation Prepare the Host-Demo

 The Host-Demo section contains three macro files. All of them need
 to get imported into a fresh workbook.

 <table>
   <tr><td><b>Build_Workbook.bas:</b></td> <td>Build the complete workbook     </td></tr>
   <tr><td><b>HID_Connection.bas:</b></td> <td>Interface to the Generic HID    </td></tr>
   <tr><td><b>Demo_App.bas:</b></td> <td>Demo for LED und GPIO   control </td></tr>
 </table>

 Run the macro `Build_Workbook` found in `Build_Workbook` once. This macro
 builds all necessary dialog sheets as well as the `Main` sheet. When done
 you should save the file with a name you like.


 @section Sec_Usage Use the Host-Demo

 The workbook just prepared contains the `Main` sheet, giving a
 minimal control. First the USB-Userport needs to get connected to
 the computer. Next the serial number is written into cell `C3`
 ("USB-Userport Address:"). The default is '1' but might need a
 change depending on how the compile options of the USB-Userport
 firmware have been choosen.

 Clicking the `Connect` button triggers searching the device. If
 found the state changes to "Connected". The `Connect` button gets
 replaced by the `Disconnect` button.

 For a first trial a click on "Run LED Control" will start the
 respective dialog to control the two on-board LEDs. Clicking into
 a checkbox immediately changes the respective LED's state.
 Clicking the `Done` button exits the dialog.

 `Run GPIO Control` starts the huge dialog to manually control the
 port lines. On the left you find the 14 lines of GPIO1, the 4
 lines of GPIO2 are on the right.

 Each line is represented by three checkboxes, two of those are
 user accessible. `Set[x]` interfaces to the microcontroller's
 PORT register. `Dir[x]` corresponds to the DDR register. All
 lines have exactly the same properties the ATmega32U4 already
 provides.

 <table>
   <tr><th>   Set[x]       </th> <th>   Dir[x]     </th> <th>   Property         </th></tr>
   <tr><td>'0'             </td> <td>'0'           </td> <td>Input               </td></tr>
   <tr><td>'1'             </td> <td>'0'           </td> <td>Input, pulled up    </td></tr>
   <tr><td>'0'             </td> <td>'1'           </td> <td>Output, driving 0 V </td></tr>
   <tr><td>'1'             </td> <td>'1'           </td> <td>Output, driving 5 V </td></tr>
 </table>

 `Get[x]` reads back the logical state of the line. The states
 are read from the controller's PIN register.

 The 4 lines of GPIO2 can also serve as analog voltage inputs.
 Each line can get configured individually. At first the analog
 reference voltage needs to get selected. The hardware allows just
 2.56 V internal reference or the analog supply AVcc which is
 roughly 4.7 V in case of USB-supply. The selection is done
 globally for all analog inputs. It can be changed any time.

 Checking the `DIDR` box disengages the digital input circtuitry.
 Please see the controller datasheet for an explanation.
 Checking the `Enable` box configures the ADC and gets the device
 to report the respective analog value. The value is returned as
 left adjusted unsigned 16 bit value. Since the ADC just has a 10
 bit resolution, the result jumps in steps as large as 64 by
 intention. ADC enhancements to higher resolution will just reduce
 this step size and thus will not need rework of any applications.

 <table>
   <tr><th>   DIDR[x]      </th> <th>   Enable     </th> <th>   Property            </th></tr>
   <tr><td>'0'             </td> <td>'0'           </td> <td>Full digital GPIO      </td></tr>
   <tr><td>'1'             </td> <td>'0'           </td> <td>Just digital output, no digital input</td></tr>
   <tr><td>'0'             </td> <td>'1'           </td> <td>Full digital GPIO plus analog input  </td></tr>
   <tr><td>'1'             </td> <td>'1'           </td> <td>Just digital output plus analog input</td></tr>
 </table>

 By intention all the GPIO2 controls still are accessible. This
 enables special experiments reading analog values while the line
 drives as output or the pull-up circuitry is enabled.

 Clicking the `Update` button initiates the data exchange - the
 settings of outputs and directions are sent to the device, the
 port lines logic levels and the analog values are read from the
 device. In any case the data is written first, the read back
 takes place thereafter. This way all the input states are
 immediately reflecting the settings. If an output reads back the
 opposite level then there is a short circuit! This is not an
 issue with inputs (with or without pull-up).
 Clicking the `Done` button exits the dialog.

 A click on the `Run Servo Control` button pops up the servo control
 window. There is one indicator and spin control field for each
 servo. With the spin control the pulse width is adjusted in the
 range from 0 to 250. The pulse width is shown in the indicator
 field. The new pulse width is sent to the USB-Userport when the
 `Update`-button is hit.  Clicking the `Done` button exits the
 dialog.

 To start the pulse generator of a particular servo it is necessary
 to give one click to its `Use`-button. The pulse generator
 immediately takes over control of the respective GPIO-line and
 keeps running until a RESET or loss of power occurs.


@section Sec_HID_Connection HID Connection

 The connection from the user code is handled by the
 functions found in `HID_Connection.bas`. It is exactly this set of
 functions that gets used for your individual application. They
 meet exactly the definitions from the USB-Userport.

 One might check hers / his own programming skills by writing a
 simple LED blink application. `BlinkDemo.bas` gives a sample
 solution, based on a delay techniques collection found at
 [Stackoverflow](https://stackoverflow.com/questions/1544526/how-to-pause-for-specific-amount-of-time-excel-vba).

 Happy Hacking!
*/
